http://www.liaoxuefeng.com/
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

git init

git add $file_list
git commint -m "notes"

git log --pretty=oneline
git status
git diff $file

HEAD     # current version
HEAD^	 # previous version
HEAD^^	 # pre-previous version
HEAD~100 # pre-100 version

git reset --hard HEAD^	      # revert back to previous version
git reset --hard $version_id  # only few numbers is enough

git reflog	# list git version operation records

git diff HEAD -- $file

git reset HEAD $file	# fetch "git add $file" back to workspace
git checkout -- $file	# revert change

rm $file
git status
git rm $file


ssh-keygen.exe -t rsa -C "git@github.com"
cat ~/.ssh/id_rsa.pub

cd ~/xiaonan_git/WorkNots
git remote add origin git@github.com:XiaonanLi0902/WorkNotes.git #origin: git
remote name
git push -u origin master # first time push to github
git push orgin master


git clone https://github.com/XiaonanLi0902/WorkNotes.git


#git branch operations
git checkout -b home_dev # git branch home_dev; git checkout home_dev
git branch

git merge home_dev #merge home_dev to master
git branch -d home_dev # delete branch
git branch -D home_dev # delete brach home_dev by force, even it not fully merged.

git log --graph --pretty=oneline --abbrev-commit

git merge --no-ff -m "merge with no-ff" home_dev # forbit fast forward and generate a new commit during merge


#git stash is very useful
# when you are assgined a bug, and you need to fix it assp, but your work is only half done.
git stash # save your current work
git stash list
git stash pop # git stash apply stash@{0}, git stash drop stash@{0}

#git remote
git remote
git remote -v
git checkout -b home_dev origin/home_dev # check out home_dev from origin/home_dev branch
#change many code in this branch
git branch --set-upstream home_dev origin/home_dev
git pull  # get latest version from origin/home_dev
#fix update confict
git commit -m "fix conflict"
git push origin home_dev




# git tag
git tag v1.0
git tag
git tag v0.9 $commit_id # git tag -a v0.9 -m "version 0.9 released" $commit_id
git show v0.9

git tag -s <tagname> -m "blabla..." <commit_id>

git tag -d v0.9

git push origin v1.0	# push one tag
git push orign --tags	# push all tags


git tag -d v0.9	# delete a local tag
git push origin :refs/tags/v0.9 # delete a remote tag


# fork git repository and then you can have R/W permissions, set pull request

git config --global color.ui true

#.gitignore # https://github.com/github/gitignore

git add -f App.class
git check-ignore -v App.class 

#alias
git config --global alias.st status
git config --global alias.ci commit
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.unstage 'reset HEAD'
git config --global alias.last 'log -1'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
#cat .git/config 


#setup git server

sudo apt-get install git
sudo adduser git
#collect all user's public keys(id_rsa.pub) to /home/git/.ssh/authorized_keys

sudo git init --bare sample.git
sudo chown -R git:git sample.git

#git:x:1001:1001:,,,:/home/git:/bin/bash -> git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
git clone git@server:/srv/sample.git

#Gitosis : https://github.com/res0nat0r/gitosis # manage many R&D's public keys
#Gitolite : https://github.com/sitaramc/gitolite # write scripts to limit branches/directory R/W permission


















